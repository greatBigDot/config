#!/bin/bash
# Exit on error, error upon unset var, don't glob, don't overwrite when redirecting, and
# propogate errors through pipelines:
set -eufC -o pipefail
# Use extended pattern matching (e.g. in certain string manipulations):
shopt -s extglob
# Don't rip apart strings for containing spaces, or something (whitespace in
# bash is confusing):
IFS="$(printf '\t\n')"


# About the { false; return $?; } thing... don't ask. Trust me, you don't want
# to know.

function main {
    # First step: process extract-args's own options.
    # Since I'm trying to make a clean break from getopt/getopts, I'll do this
    # manually.

    local optstr=''
    local num='0'
    local positional=( )

	local opts=( )
	local split_opt=( )
	local split_opts=( )

	local arg_name;local op_id

	[ ! -v 'OPTIONS' ] && local options='OPTIONS' || local options=''
	[ ! -v 'PARAMS' ] && local params='PARAMS' || local params=''

	[ "$#" -gt 0 ] || { fail;return $?; }

    while [ "$#" -gt 0 ]; do
        case "$1" in
            -o|--opts )
                [ -n "${2+_}" ] && [ ! "${2}" = '--' ] || { fail;return $?; }
				optstr="$2"
				shift 2 ;;
			--opts=*)
				optstr="${1#--opts=}"
				[ -n "${optstr}" ] || { opt-fail;return $?; }
				shift ;;
			-n )    # TODO: Check validity of range
				[ -n "${2+_}" ] && [ ! "${2}" = '--' ] || { fail;return $?; }
				[[ $2 =~ ^([0-9]*-[0-9]*)|([0-9]+)$ ]] || { opt-fail;return $?; }
				num="$2"
				shift 2 ;;
			-O )    # TODO: Check for clashes with special names (e.g. PATH, _).
				[ -n "${2+_}" ] && [ ! "${2}" = '--' ] || { fail;return $?; }
				is-valid-name "$2" || \
					{ [ $? -eq 1 ] || \
						  { internal-fail;return $?; }
					  { opt-fail;return $?; }; }
				options="$2"
				shift 2 ;;
			-P )    # TODO: Check for clashes with special names (e.g. PATH, _).
				is-valid-name "$2" || \
					{ [ $? -eq 1 ] || \
						  { internal-fail;return $?; }
					  { opt-fail;return $?; }; }
				params="$2"
				shift 2 ;;
			--help )
				echo "$(USAGE)";return 0
				break ;;
			-- )
				# Note that this is mandatory (unless '--help' is used).
				shift
				break ;;
			* )
				fail ;;
		esac
    done
	[ -n "${options}" ] && unset "${options}"
	[ -n "${params}"  ] && unset "${params}"
	[ -n "${options}" ] && declare -Ag -- "${options}"
	[ -n "${params}"  ] && declare -ag -- "${params}"

    # There are two steps: analyze the optstring, then use that to analyze the
    # input (the rest of the positional parameters).

	IFS=';' read -rs -a opts <<< "$optstr"

	local opt
	for opt in "${opts[@]}" ; do
		if is-valid-opt "$opt"; then
			IFS='/,' read -rs -a split_opt <<< "$opt"
			split_opts+=( "${split_opt[@]}" )
		else
			[ $? -eq 1 ] || { internal-fail;return $?; }
			{ opt-fail;return $?; }
		fi
	done; unset opt

	local opt=''
	while [ "$#" -gt 0 ] ; do
		local arg="$1"
		# If "$arg" is '--', that's the signal to move on to the command
		# parameters:
		[ "$arg" = '--' ] && { shift;break; }
		# If "$arg" isn't even *pretending* to be an option, then it can only be
		# a command parameter:
		[ ! "${arg:0:1}" = '-' ] && break
		# If the argument is not in the list of allowed options, then fail (if
		# it wanted to be interpreted as a command parameter, '--' should have
		# been used):
		arg_name="${arg##-?(-)}"
		op_id="$(opt-match "$arg_name" "${split_opts[@]}")" || \
			{ [ $? -eq 1 ] || \
				  { internal-fail;return $?; }
			  { invalid-input;return $?; }; }
		# If it requires a parameter but has none, then fail:
		[ -z "${2+_}" ] && [ "${op_id:(-1)}" = ':' ] && [[ ! ${arg} =~ = ]] && \
			{ invalid-input;return $?; }
		# But if it survives all these tests, then it must be a valid option.
		# If the user doesn't want output other than success/fail, don't give
		# them any:
		[ -z "${options}" ] && continue
		# Set the option's parameter, iff it has one:
		if [ "${op_id:(-1)}" = ':' ]; then
			if [[ ${arg_name} =~ = ]]; then
				local param="${arg_name#*=}"
				local arg_name="${arg_name%=*}"
				shift 1
			else
				local param="$2"
				shift 2
			fi

			if [[ ${op_id} =~ = ]]; then
				local op_temp="${op_id#\!}"
			    local op_bare="${op_temp%:}"
				local op_short="${op_bare:0:1}"
				local op_long="${op_bare:2}"

				declare -Ag -- "${options}[${op_short}]=${param}"
				declare -Ag -- "${options}[${op_long}]=${param}"
			else
				declare -Ag -- "${options}[${arg_name}]=${param}"
			fi
		else
			declare -Ag -- "${options}[${arg_name}]"=''
			shift 1
		fi
	done

	local lower="${num%-*}"
	lower="${lower:-0}"
	local upper="${num#*-}"
	upper="${upper:-${#}}"

	[ "${#}" -ge "${lower}" ] && [ "${#}" -le "${upper}" ] || \
		{ invalid-input; return $?; }

	# I know, I know, 'eval' is bad. But "$params" has been shown to be a valid
	# name (alphanumeric+underscore, no leading numeral), so arbitrary code
	# execution should be impossible. Everything else is single quoted. Sooo,
	# I'm /pretty/ sure this is fine. I tried to do it with 'declare', but I
	# don't think it's possible. The only other option, AFAICT, is tedious
	# element-by-element copy-pasting.
	[ -n "${params}" ] && eval -- "${params}"='( "$@" )'
	return 0

	# TODO:
	#     * Test for the satisfaction of the restrictions ('!', ',' and '/').
	#     * Add functionality for the '-manyshort' format.
}


function is-valid-name {
	[ -n "$1+_" ] && local name="$1" || return 2

	if [[ name =~ ^(([a-zA-Z_][a-zA-Z_0-9]*)|)$ ]]; then
		return 0
	else
		return 1
	fi
}

# TODO: organize this function sanely:
function opt-match {
	[ -n "${1+_}" ] && local arg="$1" || return 2
	shift 1; local array=( "$@" )

    local regex
	local arg_="${arg%%=*}"
	if [ "${#arg_}" -lt "${#arg}" ] && [ "${#arg_}" -eq 1 ];then
		return 1
	fi
	for i in "${array[@]}" ; do
		# AFAICT, this works:
		regex="((^\!?(.=)?${arg_}:?$)|(${arg_}=))"
		if [[ ${i} =~ ${regex} ]]; then
			# If it has an equals sign but it's not supposed to, then it fail.
			if [[ ${arg} =~ = ]] && [ "${i:(-1):1}" != ':' ]; then
				return 1
			fi
			echo "${i}";return 0
		fi
	done
	return 1
}

function is-valid-opt {
    [ -n "${1+_}" ] && local opt="$1" || return 2

	local fail=0
    [[ ! $opt =~ ,.*/ ]] || fail=1
	[[ ! $opt =~ /.*, ]] || fail=1
	# MULTILINE STRINGS ARE HARD, OKAY
	local opt_regex='(([[:alnum:]][[:alnum:]-]*:?)|([[:alnum:]]=[[:alnum:]][[:alnum:]-]+:?)|(-))'

    case "${opt:0:1}" in
		'!' )
			[[ ${opt:1} =~ ^(${opt_regex})$ ]] || fail=1 ;;
		* )
			[[ ${opt} =~ ^((${opt_regex})([/,]${opt_regex})*)$ ]] || fail=1 ;;
	esac

	return ${fail}
}

function invalid-input {
	[ -n "${options}" ] && unset "${options}"
	[ -n "${params}" ] && unset "${params}"
	return 1
}

function opt-fail {
	echo "ERROR: Improperly formatted option string, variable name, or range" 1>&2
	echo "specification. Use '--help' for help." 1>&2
	[ -n "${options}" ] && unset "${options}"
	[ -n "${params}" ] && unset "${params}"
	return 2
}

function fail {
    echo "$(BRIEF-USAGE)" 1>&2
	[ -n "${options}" ] && unset "${options}"
	[ -n "${params}" ] && unset "${params}"
    return 3
}

function internal-fail {
    echo -e <<- 'EOF' 1>&2
		ERROR: Internal failure in extract-args!

		If you are reading this, then the option parser 'extract-args' isn't working
		properly. You'll have to fix it. Good luck!
	EOF
	caller 1>&2
	[ -n "${options}" ] && unset "${options}"
	[ -n "${params}" ] && unset "${params}"
    return 4
}


################################################################################


function BRIEF-USAGE {
    cat <<- 'EOF'
		SUMMARY
		    extract-args - Parse an option/parameter string, with some functionality for
		    mandatory/optional arguments and for specifying mutually exclusive/mutually
		    dependent arguments; MUST be sourced instead of executed to access output
		    beyond exit status. [WORK IN PROGRESS]

		USAGE
		    extract-args [(-o | --opts) <optstr>] [-n <num>] [-O <options>]
		                     [-P <params>] -- <args>...
		    extract-args --help
	EOF
}

function USAGE {
    cat <<- 'EOF'
		NAME
		    extract-args - Parse an option/parameter string, with some functionality for
		    mandatory/optional arguments and for specifying mutually exclusive/mutually
		    dependent arguments; MUST be sourced instead of executed to access output
		    beyond exit status. [WORK IN PROGRESS]

		SYNOPSIS
		    extract-args [(-o | --opts) <optstr>] [-n <num>] [-O <options>]
		                     [-P <params>] -- <args>...
		    extract-args --help

		DESCRIPTION
		    extract-args - Parse an option/parameter string, with functionality for
		    mandatory/optional arguments and for specifying mutually exclusive/mutually
		    dependent arguments.

		    Neither 'getopt' nor 'getopts' have fully suited my needs, so here's a
		    slightly more featured, much more buggy version. Specifically, in addition
		    to the features that getopt provides, extract-args allows one to specify, to
		    some extent, the interdependencies of the options, to specify how many
		    parameters are expected, to specify the equivalence of short and long forms
		    of an option, and outputs both an associative array that flags used options
		    while specifying their parameters and a sequential array containing the
		    command parameters.

		    The interdependencies take on two forms--you can say that exactly one member
		    of a list of options is allowed, and you can say that no more than one of a
		    list of options is allowed. Importantly, *these restrcitions cannot
		    overlap.* In other words, no option can appear in more than one of these
		    interdependency lists. This limits the expressivity of the script, but it
		    also deters the use of absurdly convoluted option constraints. Most
		    importantly, though, it made this script easier to program. Perhaps a future
		    version of this will allow more complex interdependencies.

		    Bash functions don't actually return values (other than the exit status);
		    consequently, to output any data more complex than a string, global
		    variables are used. This function outputs an associaitive array containing
		    all option information and a sequential array with all the command
		    parameters (see OUTPUT for details). These arrays are stored in global
		    variables whose names are specified by the '-O' and '-P' options (see
		    OPTIONS); if the options aren't used, then the associative array defaults to
		    the global variable 'options' (iff it is unset) and the sequential array to
		    'params' (iff it is unset). Note that means you MUST source this script
		    instead of running it (i.e., 'source extraact-args $args' or
		    '. extract-args $args') to view this output. Otherwise, the only form of
		    output will be the exit status.

		    There are several things this script cannot do; see LIMITATIONS below.

		    OPTIONS
		        -o, --opts <optstr>    Which options to look for and their properties.
		                               Option names must contain only alphanumeric
		                               characters and hyphens ('-') and may not begin
		                               with a hyphen, excluding the implied option named
		                               '-'. If an option name is preceded by an
		                               exclamation mark ('!')*, then the "option" is
		                               mandatory. If followed by a colon (':'), then the
		                               option has a (mandatory) parameter. If two option
		                               names, one short and one long, are connected by
		                               an equals sign ('='), they are treated as a
		                               single unit. If multiple option names (possibly
		                               with colons) are separated by commas (','), then
		                               no more than one of them may appear; if separated
		                               by slashes ('/'), then exactly one of them must
		                               appear. Semicolons (';') separate these lists. No
		                               option may appear twice.

		                               *  '!' has a special meaning to bash even when
		                               double-quoted ('""'); enclose in single quotes
		                               ('''') instead.

		                               [default: '']

		        -n <num>               The number of positional parameters to accept,
		                               specified as a range of nonegative extended
		                               integers. The bounds are separated by a hyphen
		                               ('-') and are both inclusive. If the lower-bound
		                               isn't set, it is assumed to be 0; if the upper
		                               bound isn't set, it is assumed to be positive
		                               infinity (exclusive). If a single number and no
		                               hyphens is present, then the number is assumed to
		                               represent both bounds.
		                               [default: '0']
		        -O <options>           The name of the global output associative array
		                               containing information about the options (see
		                               OUTPUT), or the empty string to not output that
		                               array.As per bash rules, the name must satisfy
		                               the regex /[a-zA-Z_][a-zA-Z0-9_]*/. Additionally,
		                               it cannot be a shell, bash, or special variable
		                               name. Note that this will overwrite the variable
		                               (unless this option is not called, in which case
		                               the default value is used iff it is unset).
		                               Script must be sourced for any of this to apply
		                               in the caller's environment.
		                               [default: 'OPTIONS' iff unset; '' otherwise]

		        -P <params>            The name of the global output associative array
		                               containing information about the options (see
		                               OUTPUT), or the empty string to not output that
		                               array.As per bash rules, the name must satisfy
		                               the regex /[a-zA-Z_][a-zA-Z0-9_]*/. Additionally,
		                               it cannot be a shell, bash, or special variable
		                               name. Note that this will overwrite the variable
		                               (unless this option is not called, in which case
		                               the default value is used iff it is unset).
		                               Script must be sourced for any of this to apply
		                               in the caller's environment.
		                               [default: 'PARAMS' iff unset; '' otherwise]

		            --help             Display this help message.

		        --                     Separates options and their parameters from
		                               command paramaters. THIS IS MANDATORY!

		    INPUT
		        In a typical application, the input will be "$@". That is, it will be
		        every argument to the command, listed sequentially and separately. To be
		        more specific, an "argument" in the context of this script is either:

		        (1) a valid option name with leading hyphen(s);
		        (2) a valid option parameter (after an applicable argument of type (1));
		        (3) a valid long option name/option parameter pair, connected by an
		            equals sign ('=') and with leading hyphens;
		        (4) a contiguous sequence of valid parameterless short option names
		            other than '-' with leading hyphen; or
		        (5) a command parameter.

		        An option name is a nonempty string of only alphanumeric characters and
		        hyphens (in particular, no whitespace), starting with an alphanumeric
		        character, except for the implied option named '-'. When applicable,
		        option names must be preceded by a single hyphen ('-') if short (one
		        character) and two hyphens otherwise.

		        Parameters can be any string of non-null Unicode characters.

		        Note that, as implied by (4), combined short option lists cannot have
		        parameters--not even the last option.

		        The arguments to be processed are all separate arguments to this
		        function; passing in '--example=of -a --poorly -- formatted string' will
		        be interpreted as a single long option named 'example=of -a --poorly
		        --formatted string'; as this contains non-(alphanumeric+hyphen)
		        characters, the script will exit with exit status 1 (see EXIT STATUS).

		    OUTPUT
		        extract-arg's output format is probably the most useful feature not
		        included in getopt or getopts. All unnecessary information is stripped
		        away, and the rest is packaged neatly and conveniently into two arrays.

		        If the processed arguments obey the rules specified by the
		        '--opts=<optstr>' option, then the script will output:

		        (1) an associative array flagging the options that were called and
		            containing their parameters; and
		        (2) a sequential array containing the command parameters.

		        If the input does not obey the given rules, the command will exit with
		        exit status 1 (see EXIT STATUS) and output nothing.

		        The (key, value) pairs of the associative array depend on the nature of
		        the options (as specified by the <optstr> param to '--opts'; see above).
		        In the below, 'opt' refers to an option's name, while 'param' refers to
		        its parameter (if it has one):

		        * If the option is in the input and has a parameter:  (opt, param).
		        * If it is in the input, is optional, has no parameter, and not
		          named '-':  (opt, '').
		        * Otherwise, it will not appear in the array.

		        *CRUCIALLY*, these rules imply that the output is *meaningless* without
		        knowing the option specification. The array output acts as a flag for
		        options without parameters while simultaneously packaging the parameters
		        for options that have them. Neither mandatory options without parameters
		        nor '--' appear in the array, as doing so would provide no information
		        whatsoever--so long as one already knows the option specification. A
		        similar story holds for telling the difference between an empty option
		        parameter and a simple flag; incidentally, this is why optional
		        parameters are forbidden.

		        After the option array comes the command parameter array, which is
		        simply an indexed sequential array containing all command-wide
		        parameters. If there are none, this array will be present, but empty.

		        Of course, the script can not simply output these arrays, as bash
		        doesn't really allow any complex data to be passed around. Instead, two
		        global variables are used, and the '-O' and '-P' options specify their
		        names ('-O' is for the option array and '-P' for the paramater array;
		        see OPTIONS). It is good practice to put these names in ALL_CAPS, as
		        they are global variables. These default to 'OPTIONS' and 'PARAMS', so
		        long as these names are unset.

		        Note that this means that the script must be sourced instead of executed
		        to access any of this output!

		        If (a) an options is not called but the corresponding default variable
		        is set, or (b) the option is called and given the empty string (''), the
		        script will not output that array in any form. For example, if
		        '-O "" -P ""' is part of the argument string, then the only form of
		        output will be the exit status (which will indicate whether or not the
		        command arguments satisfy the option specification, but will provide no
		        other information).

		    EXAMPLE
		        This command's argument format would be passed as:

		        extract-args --opts='o=opts:;n:;O:;P:;help;!-' -n '-' -- ${input}

		        where "${input}" is the set of positional arguments to process; in
		        typical typical applications, this will just be "$@".

		    EXIT STATUS
		        0  if successful.

		        1  if the input string does not obey the option specifications or is
		           otherwise improperly formatted.

		        2  if the option or range specification is improperly formatted, or one
		           or both of the array names are invalid or reserved.

		        3  if extract-args itself is given an invalid set of options.

		        4  if an internal error occurs, indicating that this script is
		           completely broken. Default.

		LIMITATIONS
		    There are several things this script cannot do. Firstly, no options can have
		    optional parameters. Secondly, as discussed above, there are limits to how
		    specific the option interdependencies can be. Thirdly, the number of
		    parameters must be a range of nonnegative integers; you can't describe an
		    arbitrary subset of the nonegative integers. Fourthly, the optional
		    parameterless '--' option for separating options from parameters is implied
		    and there is no way to turn it off (though you can make it mandatory).
		    Fifthly, other than that option, all option names must be nonempty strings
		    containing only alphanumeric characters or hyphens, with no leading hyphens.
		    Sixthly, it is assumed that no option will appear more than once; doing
		    otherwise will lead to undefined behavior. And finally, options can only be
		    signalled with a hyphen (-) or two (e.g., no pluses (+) or subcomands). If
		    you don't like any of these constraints, then build your own option-parsing
		    script!

		SEE ALSO
		    getopt, getopts
	EOF
}

main "$@"
